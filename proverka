import logging
import aiohttp
import asyncio
import re
from urllib.parse import quote

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = "8171207811:AAGPMC93yKCM_KOmzJ5cr0WxgLJs3ycO5MQ"  # <-- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")]
    ],
    resize_keyboard=True
)

# --- –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ---
back_to_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


# --- –ü–æ–∏—Å–∫ ---
@dp.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def search_start(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∏ —è –Ω–∞–π–¥—É —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                         reply_markup=back_to_menu)


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ ---
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
async def project_info(message: types.Message):
    text = (
        "‚ú® <b>Brend AI</b> ‚ú®\n\n"
        "–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "üìñ –í—ã —É–∑–Ω–∞–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é, –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –æ—Ç–ª–∏—á–∏—è.\n"
        "üß† –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ ‚Äî –≤–∞–º —Å—é–¥–∞!"
    )
    await message.answer(text, reply_markup=back_to_menu)


# --- –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ---
@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu(message: types.Message):
    await message.answer("üëã –í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ ---
@dp.message(F.text)
async def brand_handler(message: types.Message):
    brand = message.text.strip()

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    if brand == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("üëã –í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu)
        return

    status_msg = await message.answer(f"üîé –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ <b>{brand}</b>...")

    try:
        result = await asyncio.wait_for(fetch_brand_info(brand), timeout=13)
        if result:
            await status_msg.edit_text(result)
            await message.answer("–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=back_to_menu)
            return
    except asyncio.TimeoutError:
        result = None
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –ø–æ–∏—Å–∫–µ:")
        result = None

    if result:
        await status_msg.edit_text(result)
        await message.answer("–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=back_to_menu)
    else:
        final = await fetch_brand_info(brand)
        if final:
            await status_msg.edit_text(final)
            await message.answer("–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=back_to_menu)
        else:
            await status_msg.edit_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å?", reply_markup=back_to_menu)


# --- –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
async def fetch_brand_info(brand: str) -> str:
    headers = {
        "User-Agent": "BrandHelperBot/1.0 (https://t.me/YourBotUsername)",
        "Accept": "application/json"
    }
    timeout = aiohttp.ClientTimeout(total=5)

    async with aiohttp.ClientSession(timeout=timeout, headers=headers) as session:
        # --- –†—É—Å—Å–∫–∞—è –í–∏–∫–∏–ø–µ–¥–∏—è ---
        try:
            search_url = "https://ru.wikipedia.org/w/api.php"
            params = {"action": "query", "list": "search", "srsearch": brand, "format": "json"}
            async with session.get(search_url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    search_results = data.get("query", {}).get("search", [])
                    if search_results:
                        page_title = search_results[0]["title"]
                        qtitle = quote(page_title, safe='')
                        summary_url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{qtitle}"
                        async with session.get(summary_url) as sresp:
                            if sresp.status == 200:
                                sdata = await sresp.json()
                                extract = sdata.get("extract")
                                url = sdata.get("content_urls", {}).get("desktop", {}).get("page", "")
                                if extract:
                                    return clean_summary(page_title, extract, url)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ä—É—Å—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏:")

        # --- –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –í–∏–∫–∏–ø–µ–¥–∏—è ---
        try:
            search_url_en = "https://en.wikipedia.org/w/api.php"
            params = {"action": "query", "list": "search", "srsearch": brand, "format": "json"}
            async with session.get(search_url_en, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    search_results = data.get("query", {}).get("search", [])
                    if search_results:
                        page_title = search_results[0]["title"]
                        qtitle = quote(page_title, safe='')
                        summary_url = f"https://en.wikipedia.org/api/rest_v1/page/summary/{qtitle}"
                        async with session.get(summary_url) as sresp:
                            if sresp.status == 200:
                                sdata = await sresp.json()
                                extract = sdata.get("extract")
                                url = sdata.get("content_urls", {}).get("desktop", {}).get("page", "")
                                if extract:
                                    return clean_summary(page_title, extract, url)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏:")

        # --- DuckDuckGo ---
        try:
            ddg_url = f"https://api.duckduckgo.com/?q={quote(brand)}&format=json&lang=ru"
            async with session.get(ddg_url) as resp:
                if resp.status == 200:
                    dd = await resp.json()
                    text = dd.get("AbstractText") or (dd.get("RelatedTopics") and dd["RelatedTopics"][0].get("Text"))
                    if text:
                        short = re.sub(r"\s*\(.*?\)", "", text)
                        short = re.sub(r"\[\d+\]", "", short)
                        short_sent = ". ".join(short.split(". ")[:6]) + "."
                        if len(short_sent) > 900:
                            short_sent = short_sent[:900].rsplit(".", 1)[0] + "."
                        return f"<b>{brand}</b>\n\n{short_sent}\n\nüîó DuckDuckGo"
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DuckDuckGo")

    return ""


def clean_summary(title: str, text: str, url: str) -> str:
    clean_text = re.sub(r"\s*\(.*?\)", "", text)
    clean_text = re.sub(r"\[\d+\]", "", clean_text)
    sentences = clean_text.split(". ")
    short_text = ". ".join(sentences[:6]) + "."
    if len(short_text) > 900:
        short_text = short_text[:900].rsplit(".", 1)[0] + "."
    return f"<b>{title}</b>\n\n{short_text}\n\nüîó <a href='{url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
