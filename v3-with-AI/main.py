import logging
import aiohttp
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from collections import defaultdict
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "8171207811:AAGPMC93yKCM_KOmzJ5cr0WxgLJs3ycO5MQ"
YANDEX_API_KEY = "AQVN0-erzW4-kr4F7HrG9gqgVRm7__JJBsCceTCX"
YANDEX_FOLDER_ID = "b1gv72v9ib7kguo2h06h"
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
user_dialogs = defaultdict(list)
MAX_HISTORY_LENGTH = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
DIALOG_TIMEOUT = 3600  # –¢–∞–π–º–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"),
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫"),
        KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    )
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def get_back_to_menu_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.add(KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"))
    builder.adjust(1, 1)
    return builder.as_markup(resize_keyboard=True)

def cleanup_old_dialogs():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    current_time = datetime.now()
    users_to_remove = []
    
    for user_id, messages in user_dialogs.items():
        if messages and current_time - messages[-1].get('timestamp', current_time) > timedelta(seconds=DIALOG_TIMEOUT):
            users_to_remove.append(user_id)
    
    for user_id in users_to_remove:
        del user_dialogs[user_id]

def get_user_history(user_id: int) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cleanup_old_dialogs()
    return user_dialogs.get(user_id, [])

def add_to_history(user_id: int, role: str, text: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    if user_id not in user_dialogs:
        user_dialogs[user_id] = []
    
    user_dialogs[user_id].append({
        'role': role,
        'text': text,
        'timestamp': datetime.now()
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    if len(user_dialogs[user_id]) > MAX_HISTORY_LENGTH:
        user_dialogs[user_id] = user_dialogs[user_id][-MAX_HISTORY_LENGTH:]

def clear_user_history(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_dialogs:
        del user_dialogs[user_id]

async def ask_yandex_gpt(question: str, user_id: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Yandex GPT —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    """
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    history = get_user_history(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
    messages = [
        {
            "role": "system",
            "text": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ."
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    for msg in history:
        messages.append({
            "role": msg['role'],
            "text": msg['text']
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    messages.append({
        "role": "user",
        "text": question
    })
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 1500
        },
        "messages": messages
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(YANDEX_GPT_URL, headers=headers, json=data, timeout=30) as response:
                
                if response.status == 200:
                    result = await response.json()
                    response_text = result["result"]["alternatives"][0]["message"]["text"]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                    add_to_history(user_id, "user", question)
                    add_to_history(user_id, "assistant", response_text)
                    
                    return response_text
                
                elif response.status == 401:
                    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á Yandex GPT"
                
                elif response.status == 403:
                    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
                
                else:
                    error_text = await response.text()
                    return f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text}"
                    
    except asyncio.TimeoutError:
        return "‚è∞ –¢–∞–π–º–∞—É—Ç: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
    except Exception as e:
        return f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Yandex GPT.\n\n"
        "‚ú® <b>–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</b> –¢–µ–ø–µ—Ä—å —è –ø–æ–º–Ω—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n\n"
        "‚Ä¢ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ - –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ - –ø–µ—Ä–µ–π–¥—É –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"
    )
    await message.answer(welcome_text, reply_markup=get_main_menu(), parse_mode="HTML")

@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    welcome_back_text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )
    await message.answer(welcome_back_text, reply_markup=get_main_menu())

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Yandex GPT –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üß† <b>–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</b> –≠—Ñ—Ñ–µ–∫—Ç –ø–∞–º—è—Ç–∏! –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
        "<b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>\n"
        "‚Ä¢ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ - —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞\n\n"
        "–¢–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_menu())

@dp.message(Command("status"))
async def status_handler(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex GPT
    """
    status_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex GPT...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
    if YANDEX_API_KEY.startswith("your_") or YANDEX_FOLDER_ID.startswith("your_"):
        await status_msg.edit_text("‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ó–∞–º–µ–Ω–∏—Ç–µ YANDEX_API_KEY –∏ YANDEX_FOLDER_ID –≤ –∫–æ–¥–µ.")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_result = await ask_yandex_gpt("–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ä–∞–±–æ—Ç–∞–µ—Ç'", message.from_user.id)
    
    if "—Ä–∞–±–æ—Ç–∞–µ—Ç" in test_result.lower() or "work" in test_result.lower():
        await status_msg.edit_text("‚úÖ Yandex GPT –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    else:
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:\n{test_result}")

@dp.message(Command("history"))
async def history_handler(message: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    """
    history = get_user_history(message.from_user.id)
    
    if not history:
        await message.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.")
        return
    
    history_text = "üìù <b>–¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:</b>\n\n"
    
    for i, msg in enumerate(history[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        role_emoji = "üë§" if msg['role'] == 'user' else "ü§ñ"
        history_text += f"{role_emoji} <b>{msg['role'].title()}:</b> {msg['text']}\n\n"
    
    history_text += f"\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}"
    await message.answer(history_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
async def project_info_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"
    """
    project_info = (
        "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "ü§ñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> Yandex GPT AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç\n"
        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –£–º–Ω—ã–π –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Yandex GPT\n"
        "üß† <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –≠—Ñ—Ñ–µ–∫—Ç –ø–∞–º—è—Ç–∏ - –±–æ—Ç –ø–æ–º–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "üîß <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
        "   ‚Ä¢ Python 3.8+\n"
        "   ‚Ä¢ Aiogram 3.x (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Telegram)\n"
        "   ‚Ä¢ Yandex GPT API\n"
        "   ‚Ä¢ aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "‚ö° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "   ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "   ‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞–º—è—Ç—å—é\n"
        "   ‚Ä¢ –£–º–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ\n\n"
        "üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> Fram1se\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üîç –ü–æ–∏—Å–∫</b> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
    )
    await message.answer(project_info, parse_mode="HTML", reply_markup=get_back_to_menu_keyboard())

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
async def search_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
    """
    search_info = (
        "üîç <b>–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "üß† <b>–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–º–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "‚Ä¢ –ù–∞—É—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º\n"
        "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã\n"
        "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ üëá\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
        "–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é - <b>üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é</b>"
    )
    await message.answer(search_info, parse_mode="HTML", reply_markup=get_back_to_menu_keyboard())

@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    """
    welcome_back_text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üòä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )
    await message.answer(welcome_back_text, reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def clear_history_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    """
    clear_user_history(message.from_user.id)
    await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ë–æ—Ç –∑–∞–±—ã–ª –≤—Å—ë, —á—Ç–æ –±—ã–ª–æ —Ä–∞–Ω–µ–µ.", reply_markup=get_main_menu())

@dp.message()
async def message_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_text = message.text.strip()
    user_id = message.from_user.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not user_text:
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ GPT
    if user_text not in ["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", "üîç –ü–æ–∏—Å–∫", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        status_msg = await message.answer("ü§î –î—É–º–∞—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
        response = await ask_yandex_gpt(user_text, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await status_msg.edit_text(response)

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–∞–º—è—Ç–∏...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())